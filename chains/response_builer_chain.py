import logging
from langchain_core.prompts import ChatPromptTemplate, PromptTemplate

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

class ResponseBuilder:
    def __init__(self):
        """# Using Overview: {overview}, Detailed Analysis: {analysis}, References: {references}   Answer the following query: {query}"""

        # Define the prompt template with placeholders for dynamic content
        clearification_prompt_template = """I'd be happy to help with your {domain} issue! However, I need more details to assist you effectively.
Could you please provide more information, such as:

1) A brief description of your issue (without sharing sensitive personal details).
2) What kind of assistance you need?.

Once I have more details, I can offer relevant insights or point you in the right direction!"""



        structured_prompt_template = """
Overview: {overview}

Detailed Analysis:
{analysis}

References:
{references}

Disclaimer: {disclaimer}"""
        # Initialize the PromptTemplate with the defined template and input variables
        self.structured_prompt = PromptTemplate(template=structured_prompt_template, input_variables=["overview", "analysis", "references", "disclaimer","query"])
        self.clarification_prompt = PromptTemplate(template=clearification_prompt_template, input_variables=["domain"])
        # self.prompt = ChatPromptTemplate.from_template()

    def build(self, inputs):
        logger.info("Inside the Reponse Builder")
        # Build the structured response using the provided inputs

        if inputs['sub_category'] == 'Needs Clarification':
            structure = {
                "domain": inputs["domain"]
            }
            logger.info(f"Generated Response: {self.clarification_prompt.format(**structure)}")
            return {**inputs, "response":self.clarification_prompt.format(**structure)}
        else:
            structure = {
                "overview": self._generate_overview(inputs),
                "analysis": self._format_analysis(inputs["analysis"][0]),
                "references": self._format_references(inputs["analyst_response"]),
                "disclaimer": "This response is generated by an automated system and may contain errors. Please verify with a qualified expert."
            }
            logger.info(f"Generated Response: {self.structured_prompt.format(**structure)}")
            # Format the response using the prompt template
            return {**inputs, "response":self.structured_prompt.format(**structure)}

    def _generate_overview(self, inputs):
        # Generate the overview section of the response
        overview = f"This issue pertains to the {inputs['domain']} domain, primarily governed by the principle: {inputs['analysis'][0]['main_principle']}."
        return overview

    def _format_analysis(self, analysis):
        # Format the analysis section of the response
        formatted_analysis = "\n".join([
            f"- {point['principle']} (Section {point['section']})"
            for point in analysis["points"]
        ])
        return formatted_analysis

    def _format_references(self, context):
        # Format the references section of the response
        formatted_references = "\n".join(context["references"])
        return formatted_references